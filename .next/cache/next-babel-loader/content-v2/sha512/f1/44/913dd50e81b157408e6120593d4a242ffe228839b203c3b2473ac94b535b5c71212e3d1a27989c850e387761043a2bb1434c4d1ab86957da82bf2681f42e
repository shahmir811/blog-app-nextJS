{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nfunction getPostData(fileName) {\n  const filePath = path.join(postsDirectory, fileName);\n  const fileContent = fs.readFileSync(filePath, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(fileContent);\n  const postSlug = fileName.replace(/\\.md$/, ''); // removes the file extension\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n}\n\nexport function getAllPosts() {\n  const postFiles = fs.readdirSync(postsDirectory); // fetch all the post files\n\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n}","map":{"version":3,"sources":["/home/shahmir/projects/udemy/maximillian/nextjs/complete-blog-js/lib/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostData","fileName","filePath","fileContent","readFileSync","data","content","postSlug","replace","postData","slug","getAllPosts","postFiles","readdirSync","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC9B,QAAMC,QAAQ,GAAGR,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BK,QAA1B,CAAjB;AACA,QAAME,WAAW,GAAGV,EAAE,CAACW,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBX,MAAM,CAACQ,WAAD,CAAhC;AAEA,QAAMI,QAAQ,GAAGN,QAAQ,CAACO,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB,CAL8B,CAKkB;;AAEhD,QAAMC,QAAQ;AACbC,IAAAA,IAAI,EAAEH;AADO,KAEVF,IAFU;AAGbC,IAAAA;AAHa,IAAd;;AAMA,SAAOG,QAAP;AACA;;AAED,OAAO,SAASE,WAAT,GAAuB;AAC7B,QAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAejB,cAAf,CAAlB,CAD6B,CACqB;;AAElD,QAAMkB,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC1C,WAAOhB,WAAW,CAACgB,QAAD,CAAlB;AACA,GAFgB,CAAjB;AAIA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAAhE,CAApB;AAEA,SAAOJ,WAAP;AACA;AAED,OAAO,SAASK,gBAAT,GAA4B;AAClC,QAAMR,QAAQ,GAAGH,WAAW,EAA5B;AAEA,QAAMY,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACC,UAA7B,CAAtB;AAEA,SAAOH,aAAP;AACA","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport matter from 'gray-matter';\n\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nfunction getPostData(fileName) {\n\tconst filePath = path.join(postsDirectory, fileName);\n\tconst fileContent = fs.readFileSync(filePath, 'utf-8');\n\tconst { data, content } = matter(fileContent);\n\n\tconst postSlug = fileName.replace(/\\.md$/, ''); // removes the file extension\n\n\tconst postData = {\n\t\tslug: postSlug,\n\t\t...data,\n\t\tcontent,\n\t};\n\n\treturn postData;\n}\n\nexport function getAllPosts() {\n\tconst postFiles = fs.readdirSync(postsDirectory); // fetch all the post files\n\n\tconst allPosts = postFiles.map(postFile => {\n\t\treturn getPostData(postFile);\n\t});\n\n\tconst sortedPosts = allPosts.sort((postA, postB) => (postA.date > postB.date ? -1 : 1));\n\n\treturn sortedPosts;\n}\n\nexport function getFeaturedPosts() {\n\tconst allPosts = getAllPosts();\n\n\tconst featuredPosts = allPosts.filter(post => post.isFeatured);\n\n\treturn featuredPosts;\n}\n"]},"metadata":{},"sourceType":"module"}