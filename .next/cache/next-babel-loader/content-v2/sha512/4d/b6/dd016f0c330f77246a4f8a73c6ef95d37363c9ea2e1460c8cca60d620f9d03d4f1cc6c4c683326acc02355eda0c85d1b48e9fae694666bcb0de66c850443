{"ast":null,"code":"import { MongoClient } from 'mongodb';\n\nconst handler = async (req, res) => {\n  if (req.method === 'POST') {\n    const {\n      email,\n      name,\n      message\n    } = req.body;\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'Invalid input.'\n      });\n      return;\n    } // Store it in a database\n\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    let client;\n\n    try {\n      client = await MongoClient.connect(process.env.DB_CONNECTION_STRING);\n    } catch (error) {\n      res.status(500).json({\n        message: \"Sorry, couldn't connect to the database server\"\n      });\n      return;\n    }\n\n    const db = client.db();\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: 'Storing message in database server failed'\n      });\n      return;\n    }\n\n    client.close();\n    res.status(201).json({\n      message: 'Successfully stored message!',\n      message: newMessage\n    });\n  }\n};\n\nexport default handler;","map":{"version":3,"sources":["/home/shahmir/projects/udemy/maximillian/nextjs/complete-blog/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","body","includes","trim","status","json","newMessage","client","connect","process","env","DB_CONNECTION_STRING","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAC1B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BL,GAAG,CAACM,IAArC;;AAEA,QAAI,CAACH,KAAD,IAAU,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CAAX,IAAkC,CAACH,IAAnC,IAA2CA,IAAI,CAACI,IAAL,OAAgB,EAA3D,IAAiE,CAACH,OAAlE,IAA6EA,OAAO,CAACG,IAAR,OAAmB,EAApG,EAAwG;AACvGP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA,KANyB,CAQ1B;;;AACA,UAAMM,UAAU,GAAG;AAClBR,MAAAA,KADkB;AAElBC,MAAAA,IAFkB;AAGlBC,MAAAA;AAHkB,KAAnB;AAMA,QAAIO,MAAJ;;AAEA,QAAI;AACHA,MAAAA,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,oBAAhC,CAAf;AACA,KAFD,CAEE,OAAOC,KAAP,EAAc;AACfhB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAED,UAAMa,EAAE,GAAGN,MAAM,CAACM,EAAP,EAAX;;AAEA,QAAI;AACH,YAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCV,UAApC,CAArB;AACAA,MAAAA,UAAU,CAACW,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACA,KAHD,CAGE,OAAON,KAAP,EAAc;AACfL,MAAAA,MAAM,CAACY,KAAP;AACAvB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAEDO,IAAAA,MAAM,CAACY,KAAP;AACAvB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,MAAAA,OAAO,EAAE,8BAAX;AAA2CA,MAAAA,OAAO,EAAEM;AAApD,KAArB;AACA;AACD,CAvCD;;AAyCA,eAAeZ,OAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nconst handler = async (req, res) => {\n\tif (req.method === 'POST') {\n\t\tconst { email, name, message } = req.body;\n\n\t\tif (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n\t\t\tres.status(422).json({ message: 'Invalid input.' });\n\t\t\treturn;\n\t\t}\n\n\t\t// Store it in a database\n\t\tconst newMessage = {\n\t\t\temail,\n\t\t\tname,\n\t\t\tmessage,\n\t\t};\n\n\t\tlet client;\n\n\t\ttry {\n\t\t\tclient = await MongoClient.connect(process.env.DB_CONNECTION_STRING);\n\t\t} catch (error) {\n\t\t\tres.status(500).json({ message: \"Sorry, couldn't connect to the database server\" });\n\t\t\treturn;\n\t\t}\n\n\t\tconst db = client.db();\n\n\t\ttry {\n\t\t\tconst result = await db.collection('messages').insertOne(newMessage);\n\t\t\tnewMessage.id = result.insertedId;\n\t\t} catch (error) {\n\t\t\tclient.close();\n\t\t\tres.status(500).json({ message: 'Storing message in database server failed' });\n\t\t\treturn;\n\t\t}\n\n\t\tclient.close();\n\t\tres.status(201).json({ message: 'Successfully stored message!', message: newMessage });\n\t}\n};\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}